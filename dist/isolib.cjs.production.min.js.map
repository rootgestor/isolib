{"version":3,"file":"isolib.cjs.production.min.js","sources":["../src/components/atoms/Icon/index.tsx","../src/components/molecules/Breadcrumb/index.tsx","../src/components/molecules/Table/components/ImportantIcon.tsx","../src/components/molecules/Table/utils/getRowClassName.tsx","../src/components/molecules/TextCollapse/components/Container.tsx","../src/components/molecules/TextCollapse/components/ButtonCollapse.tsx","../src/components/molecules/TextCollapse/components/Internal.tsx","../src/components/molecules/Button/index.tsx","../src/components/atoms/FlowNode/index.tsx","../src/components/atoms/FlowEdge/index.tsx","../src/hooks/useTrasnlate.ts","../src/components/molecules/Flow/components/NodeTypeModal.tsx","../src/components/molecules/Flow/helpers/exportNode.ts","../src/components/molecules/Flow/helpers/nodesRelocation.ts","../src/components/molecules/Flow/helpers/index.ts","../src/components/molecules/Flow/hooks/useFlow.ts","../src/components/molecules/Flow/index.tsx","../src/components/molecules/SelectAsync/index.tsx","../src/components/molecules/Table/index.tsx","../src/components/molecules/TextCollapse/index.tsx"],"sourcesContent":["import React from 'react';\nimport * as Icons from '@ant-design/icons';\nexport interface IconProps {\n  src: string;\n  width?: string | number;\n  height?: string | number;\n  style?: {};\n}\n\nfunction Icon({ src, ...args }: IconProps) {\n  const key = src as keyof typeof Icons;\n  const Icon: any = Icons[key];\n  if (Icon) {\n    return <Icon {...args} />;\n  }\n\n  return <img style={{ padding: '5px', ...args }} src={src} />;\n}\n\nexport default Icon;\n","import React from 'react';\nimport DefaultBreadcrumb from 'antd/lib/breadcrumb';\nimport type { BreadcrumbProps } from './typings';\n\nconst Breadcrumb = ({ breadcrumbNameMap, onClick }: BreadcrumbProps) => {\n  const handleClick =\n    (url?: string) =>\n    (event: React.MouseEvent): boolean => {\n      event.preventDefault();\n      if (url) onClick(url);\n      return false;\n    };\n\n  return (\n    <DefaultBreadcrumb style={{ margin: '16px 0' }}>\n      {breadcrumbNameMap.map(({ label, href }) => (\n        <DefaultBreadcrumb.Item key={href} href=\"#\" onClick={handleClick(href)}>\n          {label}\n        </DefaultBreadcrumb.Item>\n      ))}\n    </DefaultBreadcrumb>\n  );\n};\n\nexport default Breadcrumb;\n","import React from 'react';\nimport { BellOutlined, BellFilled } from '@ant-design/icons';\nimport { ImportantIconProps } from '../typings';\n\nfunction ImportantIcon({ important }: ImportantIconProps) {\n  const namespace = 'isolib-table-msg isolib-table-msg-icon';\n\n  if (important) {\n    return <BellFilled className={`${namespace}--selected`} />;\n  }\n  return <BellOutlined className={`${namespace}--no-selected`} />;\n}\n\nexport default ImportantIcon;\n","import { TableRecord } from '../typings';\n\nexport default (hoverID: any) =>\n  (record: TableRecord): string => {\n    const namespace = 'isolib-table-msg';\n    const classnames = [namespace];\n    if (record.read === false) {\n      classnames.push(`${namespace}--unread`);\n    }\n\n    if (hoverID === record._id) {\n      classnames.push(`${namespace}--hover`);\n    }\n\n    return classnames.join(' ');\n  };\n","import React from 'react';\nimport type { ContainerProps } from '../typings';\n\nexport const Container = ({ children, style = {} }: ContainerProps) => {\n  return (\n    <div\n      className=\"isolib-text-collapse isolib-text-collapse-container\"\n      style={style}\n    >\n      {children}\n    </div>\n  );\n};\n","import React from 'react';\nimport DefaultButton from 'antd/lib/button';\nimport type { ButtonCollapseProps } from '../typings';\n\nexport const ButtonCollapse = ({\n  children,\n  collapsed,\n  hidden,\n  innerRef,\n  onClick,\n}: ButtonCollapseProps) => {\n  return (\n    <DefaultButton\n      type=\"link\"\n      className=\"isolib-text-collapse-button\"\n      ref={innerRef}\n      hidden={hidden}\n      onClick={onClick}\n      style={collapsed ? { position: 'absolute' } : {}}\n    >\n      {children}\n    </DefaultButton>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport type { InternalProps } from '../typings';\n\nexport const Internal = ({\n  innerRef,\n  collapsed,\n  space,\n  children,\n}: InternalProps) => {\n  return (\n    <div\n      ref={innerRef}\n      style={collapsed && space ? { paddingRight: space } : {}}\n      className={classNames('isolib-text-collapse-internal', {\n        'isolib-text-collapse-internal--collapsed': collapsed,\n      })}\n    >\n      {children}\n    </div>\n  );\n};\n","import React from 'react';\nimport Icon from '../../atoms/Icon';\nimport DefaultButton from 'antd/lib/button';\nimport type { ButtonProps } from './typings';\n\nfunction Button(props: ButtonProps) {\n  const { icon, size, className, ...rest } = props;\n\n  if (size === 'bigger') {\n    return (\n      <Button className={`isolib__bigger-button ${className}`} {...rest}>\n        <div className=\"isolib__bigger-button-label\">{props.children}</div>\n        {!!icon && (\n          <div className=\"isolib__bigger-button-icon\">\n            <Icon src={icon} />\n          </div>\n        )}\n      </Button>\n    );\n  }\n\n  return <DefaultButton {...props} className={className} size={size} />;\n}\n\nexport default Button;\n","import React, { memo } from 'react';\nimport { Position, Handle } from 'reactflow';\nimport Icon from '../Icon';\n\nexport const FlowNode = memo(({ data }: any) => {\n  const { icon, label, onRemove, color = '#6938fb' } = data;\n  return (\n    <>\n      <Handle type=\"target\" position={Position.Top} isConnectable={false} />\n      <div className=\"react-flow__custom-node\">\n        <div\n          className=\"react-flow__custom-node-container\"\n          style={{ borderColor: color }}\n        >\n          <div\n            className=\"react-flow__custom-node-header\"\n            style={{ background: color }}\n          >\n            <span className=\"react-flow__custom-node-header-icon\">\n              <Icon src={icon} />\n            </span>\n            {!data?.static && (\n              <span\n                className=\"react-flow__custom-node-header-close\"\n                onClick={onRemove}\n              >\n                <Icon src=\"CloseCircleFilled\" />\n              </span>\n            )}\n          </div>\n          <div className=\"react-flow__custom-node-label\">{label}</div>\n        </div>\n      </div>\n      <Handle\n        type=\"source\"\n        position={Position.Bottom}\n        id=\"b\"\n        style={{ bottom: 10, top: 'auto' }}\n        isConnectable={false}\n      />\n    </>\n  );\n});\n","import React from 'react';\nimport { getBezierPath } from 'reactflow';\n\nexport const FlowEdge = ({\n  id,\n  sourceX,\n  sourceY,\n  targetX,\n  targetY,\n  sourcePosition,\n  targetPosition,\n  style = {},\n  data,\n  markerEnd,\n}: any): JSX.Element => {\n  const mainColor = '#b1b1b7';\n  const [edgePath] = getBezierPath({\n    sourceX,\n    sourceY,\n    sourcePosition,\n    targetX,\n    targetY,\n    targetPosition,\n    curvature: 0,\n  });\n\n  const X = (sourceX + targetX) / 2;\n  const Y = (sourceY + targetY) / 2;\n  const node = data.target;\n  const edge = id;\n\n  return (\n    <>\n      <path\n        id={id}\n        style={style}\n        className=\"react-flow__edge-path\"\n        d={edgePath}\n        markerEnd={markerEnd}\n      />\n      {!data?.static && (\n        <g\n          transform={`translate(${X}, ${Y})`}\n          onClick={() => data?.onClick(node, edge)}\n        >\n          <rect\n            x=\"-10\"\n            y=\"-10\"\n            width=\"18\"\n            ry=\"4\"\n            rx=\"4\"\n            height=\"18\"\n            fill=\"white\"\n            stroke={mainColor}\n          ></rect>\n          <text fill={mainColor} y=\"3\" x=\"-5\">\n            +\n          </text>\n        </g>\n      )}\n    </>\n  );\n};\n\n/**\n * \n  \n */\n","type I18nProps = { [key: string]: any };\n\nexport const useTranslate =\n  (i18n?: I18nProps) =>\n  (text: string): string => {\n    return i18n ? i18n[text] : text;\n  };\n","import React, { useState } from 'react';\nimport Modal from 'antd/lib/modal';\n\nimport Button from '../../../molecules/Button';\nimport { useTranslate } from '../../../../hooks/useTrasnlate';\n\nimport type { NoteTypeModalProps, payloadType } from '../typings';\n\nconst NodeTypeModal = ({\n  id,\n  icon,\n  label,\n  i18n,\n  form,\n  onSubmit,\n}: NoteTypeModalProps) => {\n  const tt = useTranslate(i18n);\n\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleCloseModal = () => setIsOpen(false);\n\n  const handleSubmit = (payload: payloadType) => {\n    onSubmit(payload);\n    handleCloseModal();\n  };\n\n  return (\n    <>\n      <Button\n        key={id}\n        icon={icon}\n        onClick={() => setIsOpen(true)}\n        size=\"bigger\"\n        className=\"flow-modal-add-item\"\n      >\n        {label}\n      </Button>\n\n      <Modal\n        title={tt('Add node')}\n        open={isOpen}\n        onCancel={handleCloseModal}\n        footer={[<Button onClick={handleCloseModal}>{tt('Close')}</Button>]}\n      >\n        {form({ onSubmit: handleSubmit })}\n      </Modal>\n    </>\n  );\n};\n\nexport default NodeTypeModal;\n","import type { Node } from 'reactflow';\nimport type { FlowDefaultNode } from '../typings';\n\nexport const exportNode = (nodes: Node[]): FlowDefaultNode[] => {\n  return nodes\n    .filter((node) => node.type === 'FlowNode')\n    .map(({ data }) => {\n      const variables: FlowDefaultNode = {\n        label: data.label,\n        icon: data.icon,\n      };\n\n      if (data.color) variables.color = data.color;\n\n      if (data.static) variables.static = data.static;\n\n      if (data.payload) variables.payload = data.payload;\n\n      return variables;\n    });\n};\n","import type { FlowNode } from '../typings';\nimport {\n  dxBetweenStartAndNode,\n  dxBetweenNodes,\n  dxLessWhenStaticNode,\n} from './index';\n\nexport const nodesRelocation = (nodes: FlowNode[]) => {\n  return nodes.reduce((initial, node, key) => {\n    const isStart = key === 0;\n    const isSecond = key === 1;\n    const beforeItem = initial[key - 1];\n    if (isStart) {\n      node.position.y = 0;\n    } else if (isSecond) {\n      node.position.y = dxBetweenStartAndNode;\n    } else {\n      const positionY = beforeItem?.position.y;\n      node.position.y = positionY + dxBetweenNodes;\n    }\n\n    if (beforeItem?.id !== 'start' && node.data.static) {\n      node.position.y -= dxLessWhenStaticNode;\n    }\n\n    return [...initial, node];\n  }, [] as FlowNode[]);\n};\n","export * from './exportNode';\nexport * from './nodesRelocation';\n\nexport const mainColor = '#6938fb';\nexport const dxBetweenNodes = 100;\nexport const dxBetweenStartAndNode = 80;\nexport const dxLessWhenStaticNode = 20;\n","import React, { useEffect, useRef } from 'react';\nimport { useNodesState, useEdgesState } from 'reactflow';\nimport { exportNode, nodesRelocation } from '../helpers';\n\nimport { mainColor, dxBetweenStartAndNode } from '../helpers';\n\nimport type {\n  FlowNode,\n  FlowDefaultNode,\n  FlowEdge,\n  payloadType,\n} from '../typings';\n\nconst circleStyles: React.CSSProperties = {\n  width: 24,\n  height: 24,\n  borderRadius: '50%',\n  textTransform: 'uppercase',\n  textAlign: 'center',\n  padding: 0,\n  justifyContent: 'center',\n  alignItems: 'center',\n  display: 'flex',\n  fontSize: '.3rem',\n};\n\nconst initialNodes: FlowNode[] = [\n  {\n    id: 'start',\n    type: 'input',\n    data: { label: 'Start' },\n    style: {\n      ...circleStyles,\n      background: mainColor,\n      borderColor: mainColor,\n      color: '#fff',\n    },\n    position: { x: 63, y: 0 },\n    draggable: true,\n  },\n  {\n    id: 'end',\n    type: 'output',\n    style: {\n      ...circleStyles,\n      background: mainColor,\n      borderColor: mainColor,\n      color: '#fff',\n    },\n    data: { label: 'End' },\n    position: { x: 63, y: dxBetweenStartAndNode },\n    draggable: true,\n  },\n];\n\nconst initialEdges: FlowEdge[] = [\n  {\n    id: 'start-end',\n    type: 'FlowEdge',\n    source: 'start',\n    target: 'end',\n  },\n];\n\ninterface BuildFlowData {\n  source: string;\n  target: string;\n  static?: boolean;\n}\n\ninterface FlowHookProps {\n  openModal: (isOpen: boolean) => void;\n  onAdd?: (nodes: FlowDefaultNode[]) => void;\n  onRemove?: (nodes: FlowDefaultNode[]) => void;\n  defaultNodes?: FlowDefaultNode[];\n  draggable?: boolean;\n}\n\nconst useFlow = ({\n  defaultNodes = [],\n  onRemove,\n  onAdd,\n  openModal,\n  draggable,\n}: FlowHookProps) => {\n  const EdgeDataRef = useRef({ idNode: '', idEdge: '' });\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n\n  const onClickEdge = (idNode: string, idEdge: string) => {\n    EdgeDataRef.current = { idNode, idEdge };\n    openModal(true);\n  };\n\n  const buildFlowEdge = (data: BuildFlowData): FlowEdge => {\n    const curDate = String(Math.random() * 100000);\n    const { source, target } = data;\n    return {\n      id: curDate,\n      type: 'FlowEdge',\n      source,\n      target,\n      data: {\n        target,\n        static: data.static,\n        onClick: onClickEdge,\n      },\n    };\n  };\n\n  const handleRemove = (id: string) => {\n    let nodeList: FlowNode[] = [];\n\n    setNodes((nodes) => {\n      setEdges((edges) => {\n        const index = nodes.findIndex((node) => node.id === id);\n\n        const afterElement = nodes[index + 1];\n        const source = nodes[index - 1].id;\n        const target = afterElement.id;\n\n        const added = buildFlowEdge({\n          static: afterElement.data.static,\n          source,\n          target,\n        });\n\n        const filtered = edges.filter(\n          (edge) => edge.source !== id && edge.target !== id\n        );\n        return [...filtered, added];\n      });\n\n      nodeList = nodes.filter((node) => node.id !== id);\n      return nodesRelocation(nodeList);\n    });\n\n    if (onRemove) {\n      onRemove(exportNode(nodeList));\n    }\n  };\n\n  const buildFlowNode = (\n    data: FlowDefaultNode,\n    payload: payloadType\n  ): FlowNode => {\n    const curDate = String(Math.random() * 100000);\n    return {\n      id: curDate,\n      type: 'FlowNode',\n      position: { x: 0, y: 0 },\n      draggable,\n      data: {\n        ...data,\n        payload,\n        onRemove: () => handleRemove(curDate),\n      },\n    };\n  };\n\n  const handleAdd =\n    (defaultNode: FlowDefaultNode) => (payload: payloadType) => {\n      let nodesCopy: FlowNode[] = [];\n\n      const { idNode, idEdge } = EdgeDataRef.current;\n      const node = buildFlowNode(defaultNode, payload);\n\n      setNodes((nodes) => {\n        setEdges((edges) => {\n          const deleted = edges.find((edge) => edge.id === idEdge);\n          if (!deleted) return edges;\n\n          const edgeCopy = edges.filter((edge) => edge.id !== idEdge);\n\n          const addedEdges = [\n            buildFlowEdge({\n              source: deleted.source,\n              target: node.id,\n            }),\n            buildFlowEdge({\n              source: node.id,\n              target: deleted.target,\n            }),\n          ];\n\n          return edgeCopy.concat(addedEdges);\n        });\n\n        nodesCopy = [...nodes];\n        const index = nodesCopy.findIndex((node) => node.id === idNode);\n        nodesCopy.splice(index, 0, node);\n        return nodesRelocation(nodesCopy);\n      });\n\n      if (onAdd) {\n        onAdd(exportNode(nodesCopy));\n      }\n\n      openModal(false);\n    };\n\n  useEffect(() => {\n    const res = defaultNodes.reduce(\n      (initial, data: FlowDefaultNode, key: number) => {\n        const beforeItem = initial.nodes[key - 1];\n\n        const node = buildFlowNode(data, data.payload || {});\n        const edge = buildFlowEdge({\n          static: data.static,\n          source: beforeItem ? beforeItem.id : 'start',\n          target: node.id,\n        });\n\n        return {\n          ...initial,\n          nodes: [...initial.nodes, node],\n          edges: [...initial.edges, edge],\n        };\n      },\n      { nodes: [] as FlowNode[], edges: [] as FlowEdge[] }\n    );\n\n    const [start, end] = initialNodes.map((item) => ({ ...item, draggable }));\n    const nodes = nodesRelocation([start, ...res.nodes, end]);\n    const sourceIndex = nodes.length - 2;\n\n    const endEdge = buildFlowEdge({\n      source: nodes[sourceIndex].id,\n      target: 'end',\n    });\n\n    setNodes(nodes);\n    setEdges([...res.edges, endEdge]);\n  }, []);\n\n  return {\n    nodes,\n    edges,\n    onNodesChange,\n    onEdgesChange,\n    handleAdd,\n  };\n};\n\nexport default useFlow;\n","import React, { useRef, useState, useEffect } from 'react';\nimport ReactFlow, { Controls } from 'reactflow';\nimport Modal from 'antd/lib/modal';\n\nimport Button from '../../molecules/Button';\nimport * as FlowNode from '../../atoms/FlowNode';\nimport * as FlowEdge from '../../atoms/FlowEdge';\nimport { useTranslate } from '../../../hooks/useTrasnlate';\nimport NodeTypeModal from './components/NodeTypeModal';\nimport useFlow from './hooks/useFlow';\n\nimport type { FlowProps, FlowContainerRef } from './typings';\n\n// import './styles.less';\n\nconst Flow = (props: FlowProps) => {\n  const containerRef: FlowContainerRef = useRef(null);\n  const tt = useTranslate(props.i18n);\n  const [horizontal, setHorizontal] = useState(0);\n  const [isOpen, openModal] = useState(false);\n\n  const { defaultNodes, onRemove, draggable, onAdd } = props;\n  const flowParams = { defaultNodes, onRemove, onAdd, openModal, draggable };\n\n  const flow = useFlow(flowParams);\n\n  const handleCloseModal = () => openModal(false);\n\n  useEffect(() => {\n    const width = containerRef.current?.offsetWidth;\n    if (width) {\n      const x = width / 2 - 150;\n      setHorizontal(x);\n    }\n  }, []);\n\n  return (\n    <div\n      ref={containerRef}\n      className=\"react-flow-global-container\"\n      style={{ width: '100%', height: '100vh' }}\n    >\n      {horizontal && (\n        <>\n          <ReactFlow\n            {...flow}\n            edgeTypes={FlowEdge}\n            nodeTypes={FlowNode}\n            snapToGrid={true}\n            defaultViewport={{\n              x: horizontal,\n              y: 0,\n              zoom: 2,\n            }}\n            minZoom={1}\n            maxZoom={2}\n            attributionPosition=\"bottom-left\"\n          >\n            <Controls showInteractive={false} />\n          </ReactFlow>\n          {props.nodeTypes && (\n            <Modal\n              title={tt('Add node')}\n              open={isOpen}\n              onCancel={handleCloseModal}\n              footer={[\n                <Button onClick={handleCloseModal}>{tt('Close')}</Button>,\n              ]}\n            >\n              <div className=\"flow-modal-add-container\">\n                {props.nodeTypes.map((node) => (\n                  <NodeTypeModal\n                    key={node.id}\n                    {...node}\n                    onSubmit={flow.handleAdd(node)}\n                    i18n={props.i18n}\n                  />\n                ))}\n              </div>\n            </Modal>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Flow;\n","import React, { useState, useRef, useMemo } from 'react';\nimport Select from 'antd/lib/select';\nimport debounce from 'lodash/debounce';\n\nimport {\n  SelectAsyncProps,\n  OptionType,\n  SelectFetchOptionsType,\n} from './typings';\n\nfunction SelectAsync({\n  fetchOptions,\n  defaultOptions,\n  defaultValue,\n  onChange,\n  ...props\n}: SelectAsyncProps) {\n  const [value, setValue] = useState(() => defaultValue);\n  const [options, setOptions] = useState(() => defaultOptions);\n  const [loading, setLoading] = useState(false);\n  const fetchRef = useRef(0);\n\n  const debounceFetcher = useMemo(() => {\n    const loadOptions = (val: SelectFetchOptionsType) => {\n      fetchRef.current += 1;\n      const fetchId = fetchRef.current;\n      setLoading(true);\n      fetchOptions(val).then((newOptions: OptionType[]) => {\n        if (fetchId !== fetchRef.current) {\n          return;\n        }\n\n        setLoading(false);\n        setOptions(newOptions);\n      });\n    };\n\n    return debounce(loadOptions, 800);\n  }, [fetchOptions]);\n\n  const handleOnChange = (val: string, option: OptionType | OptionType[]) => {\n    setValue(val);\n    if (onChange) onChange(val, option);\n  };\n\n  return (\n    <Select\n      labelInValue\n      filterOption={false}\n      onSearch={debounceFetcher}\n      onFocus={debounceFetcher}\n      {...props}\n      loading={loading}\n      value={value}\n      onChange={handleOnChange}\n      options={options}\n    />\n  );\n}\n\nexport default SelectAsync;\n","import React, { useState } from 'react';\nimport DefaultTable from 'antd/lib/table';\nimport ImportantIcon from './components/ImportantIcon';\nimport getRowClassName from './utils/getRowClassName';\nimport { TableProps, TableRecord } from '../../..';\n\nfunction Table({\n  columns,\n  dataSource,\n  hidePagination = false,\n  loading = true,\n  onChange,\n  onRowClick,\n  pagination,\n  isMessage = false,\n  ...rest\n}: TableProps) {\n  const [hover, setHover] =\n    useState<React.SetStateAction<string | undefined>>('');\n\n  const additionalColumns = [];\n  if (isMessage) {\n    additionalColumns.push({\n      dataIndex: 'important',\n      key: 'important',\n      width: 40,\n      render: (_i: string | number | boolean, res: TableRecord) => (\n        <ImportantIcon {...res} />\n      ),\n    });\n  }\n\n  const handleRowClick = (record: TableRecord) => () => {\n    if (onRowClick) onRowClick(record);\n  };\n\n  return (\n    <div className={`isolib-table ${isMessage ? 'isolib-table-msg' : ''}`}>\n      <DefaultTable\n        size=\"middle\"\n        scroll={{ y: '100%' }}\n        {...rest}\n        rowSelection={{ type: 'checkbox' }}\n        columns={[...additionalColumns, ...columns]}\n        dataSource={dataSource}\n        pagination={\n          !hidePagination && {\n            ...pagination,\n            showSizeChanger: true,\n            position: ['bottomCenter'],\n          }\n        }\n        onChange={onChange}\n        loading={loading}\n        rowKey={(record: { [key: string]: any }) => record._id}\n        rowClassName={isMessage ? getRowClassName(hover) : ''}\n        onRow={(record) => ({\n          onClick: handleRowClick(record),\n          onMouseEnter: () => setHover(record._id),\n          onMouseLeave: () => setHover(''),\n        })}\n      />\n    </div>\n  );\n}\n\nexport default Table;\n","import React, { useState, useRef, useEffect } from 'react';\nimport { Container, ButtonCollapse, Internal } from './components';\nimport type { TextCollapseProps } from './typings';\n\nfunction TextCollapse({\n  children,\n  textSpace,\n  textLess,\n  textMore,\n  style = {},\n}: TextCollapseProps) {\n  const [collapsed, setCollapsed] = useState(true);\n  const [buttonHidden, setButtonHidden] = useState(true);\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const internalRef = useRef<HTMLDivElement>(null);\n  const textRef = useRef<HTMLSpanElement>(null);\n\n  const handleClick = () => {\n    setCollapsed(!collapsed);\n  };\n\n  useEffect(() => {\n    if (internalRef.current && textRef.current) {\n      const textWidth = textRef.current.offsetWidth;\n      const innerWidth = internalRef.current.offsetWidth;\n      const bHidden = !!(textWidth + textSpace < innerWidth);\n      setButtonHidden(bHidden);\n    }\n  }, [textSpace]);\n\n  return (\n    <Container style={style}>\n      <Internal collapsed={collapsed} innerRef={internalRef} space={textSpace}>\n        <span ref={textRef}>{children}</span>\n        <ButtonCollapse\n          innerRef={buttonRef}\n          collapsed={collapsed}\n          onClick={handleClick}\n          hidden={buttonHidden}\n        >\n          {collapsed ? textMore : textLess}\n        </ButtonCollapse>\n      </Internal>\n    </Container>\n  );\n}\n\nexport default TextCollapse;\n"],"names":["Icon","src","args","Icons","React","style","padding","ImportantIcon","namespace","important","BellFilled","className","BellOutlined","Container","children","ButtonCollapse","DefaultButton","type","ref","innerRef","hidden","onClick","collapsed","position","Internal","space","paddingRight","classNames","Button","props","icon","size","rest","memo","data","label","onRemove","color","Handle","Position","Top","isConnectable","borderColor","background","Bottom","id","bottom","top","sourceX","sourceY","targetX","targetY","markerEnd","getBezierPath","sourcePosition","targetPosition","curvature","X","Y","node","target","edge","d","transform","x","y","width","ry","rx","height","fill","stroke","useTranslate","i18n","text","NodeTypeModal","form","onSubmit","tt","useState","isOpen","setIsOpen","handleCloseModal","key","Modal","title","open","onCancel","footer","payload","exportNode","nodes","filter","map","variables","nodesRelocation","reduce","initial","beforeItem","dxBetweenStartAndNode","dxBetweenNodes","dxLessWhenStaticNode","circleStyles","borderRadius","textTransform","textAlign","justifyContent","alignItems","display","fontSize","initialNodes","draggable","initialEdges","source","DefaultBreadcrumb","margin","breadcrumbNameMap","url","href","Item","event","preventDefault","containerRef","useRef","horizontal","setHorizontal","openModal","flow","defaultNodes","onAdd","EdgeDataRef","idNode","idEdge","useNodesState","setNodes","onNodesChange","useEdgesState","edges","setEdges","onEdgesChange","onClickEdge","current","buildFlowEdge","curDate","String","Math","random","buildFlowNode","nodeList","index","findIndex","afterElement","added","filtered","useEffect","res","item","endEdge","length","handleAdd","defaultNode","nodesCopy","deleted","find","edgeCopy","addedEdges","concat","splice","useFlow","_containerRef$current","offsetWidth","ReactFlow","edgeTypes","FlowEdge","nodeTypes","FlowNode","snapToGrid","defaultViewport","zoom","minZoom","maxZoom","attributionPosition","Controls","showInteractive","fetchOptions","defaultOptions","defaultValue","onChange","value","setValue","options","setOptions","loading","setLoading","fetchRef","debounceFetcher","useMemo","debounce","val","fetchId","then","newOptions","Select","labelInValue","filterOption","onSearch","onFocus","option","columns","dataSource","hidePagination","onRowClick","pagination","isMessage","hover","setHover","additionalColumns","push","dataIndex","render","_i","hoverID","handleRowClick","record","DefaultTable","scroll","rowSelection","showSizeChanger","rowKey","_id","rowClassName","classnames","read","join","onRow","onMouseEnter","onMouseLeave","textSpace","textLess","textMore","setCollapsed","buttonHidden","setButtonHidden","buttonRef","internalRef","textRef"],"mappings":"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"}