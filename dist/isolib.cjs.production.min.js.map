{"version":3,"file":"isolib.cjs.production.min.js","sources":["../src/components/molecules/Table/components/ImportantIcon.tsx","../src/components/molecules/Table/utils/getRowClassName.tsx","../src/components/molecules/TextCollapse/components/Container.tsx","../src/components/molecules/TextCollapse/components/Button.tsx","../src/components/molecules/TextCollapse/components/Internal.tsx","../src/components/molecules/Breadcrumb/index.tsx","../src/components/molecules/SelectAsync/index.tsx","../src/components/molecules/Table/index.tsx","../src/components/molecules/TextCollapse/index.tsx"],"sourcesContent":["import React from 'react';\nimport { BellOutlined, BellFilled } from '@ant-design/icons';\nimport { ImportantIconProps } from '../interfaces';\n\nfunction ImportantIcon({ important }: ImportantIconProps) {\n  const namespace = 'isolib-table isolib-table-icon';\n\n  if (important) {\n    return <BellFilled className={`${namespace}--selected`} />;\n  }\n  return <BellOutlined className={`${namespace}--no-selected`} />;\n}\n\nexport default ImportantIcon;\n","import { TableRecord } from '../index.d';\n\nexport default (hoverID: any) =>\n  (record: TableRecord): string => {\n    const namespace = 'isolib-table';\n    const classnames = [namespace];\n    if (record.read === false) {\n      classnames.push(`${namespace}--unread`);\n    }\n\n    if (hoverID === record._id) {\n      classnames.push(`${namespace}--hover`);\n    }\n\n    return classnames.join(' ');\n  };\n","import React from 'react';\nimport { ContainerProps } from '../interfaces';\n\nexport const Container = ({ children, style = {} }: ContainerProps) => {\n  return (\n    <div\n      className=\"isolib-text-collapse isolib-text-collapse-container\"\n      style={style}\n    >\n      {children}\n    </div>\n  );\n};\n","import React from 'react';\nimport DefaultButton from 'antd/lib/button';\nimport { ButtonProps } from '../interfaces';\n\nexport const Button = ({\n  children,\n  collapsed,\n  hidden,\n  innerRef,\n  onClick,\n}: ButtonProps) => {\n  return (\n    <DefaultButton\n      type=\"link\"\n      className=\"isolib-text-collapse-button\"\n      ref={innerRef}\n      hidden={hidden}\n      onClick={onClick}\n      style={collapsed ? { position: 'absolute' } : {}}\n    >\n      {children}\n    </DefaultButton>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { InternalProps } from '../interfaces';\n\nexport const Internal = ({\n  innerRef,\n  collapsed,\n  space,\n  children,\n}: InternalProps) => {\n  return (\n    <div\n      ref={innerRef}\n      style={collapsed && space ? { paddingRight: space } : {}}\n      className={classNames('isolib-text-collapse-internal', {\n        'isolib-text-collapse-internal--collapsed': collapsed,\n      })}\n    >\n      {children}\n    </div>\n  );\n};\n","import React from 'react';\nimport DefaultBreadcrumb from 'antd/lib/breadcrumb';\nimport { BreadcrumbProps } from './index.d';\n\nexport const Breadcrumb = ({ breadcrumbNameMap, onClick }: BreadcrumbProps) => {\n  const urlList: string[] = Object.keys(breadcrumbNameMap);\n\n  const handleClick =\n    (url: string) =>\n    (event: React.MouseEvent): boolean => {\n      event.preventDefault();\n      onClick(url);\n      return false;\n    };\n\n  return (\n    <DefaultBreadcrumb style={{ margin: '16px 0' }}>\n      {urlList.map((url) => (\n        <DefaultBreadcrumb.Item key={url} href=\"#\" onClick={handleClick(url)}>\n          {breadcrumbNameMap[url]}\n        </DefaultBreadcrumb.Item>\n      ))}\n    </DefaultBreadcrumb>\n  );\n};\n","import React, { useState, useRef, useMemo } from 'react';\nimport Select from 'antd/lib/select';\nimport debounce from 'lodash/debounce';\n\nimport {\n  SelectAsyncProps,\n  OptionType,\n  SelectFetchOptionsType,\n} from './interface.d';\n\nexport function SelectAsync({\n  fetchOptions,\n  defaultOptions,\n  defaultValue,\n  onChange,\n  ...props\n}: SelectAsyncProps) {\n  const [value, setValue] = useState(() => defaultValue);\n  const [options, setOptions] = useState(() => defaultOptions);\n  const [loading, setLoading] = useState(false);\n  const fetchRef = useRef(0);\n\n  const debounceFetcher = useMemo(() => {\n    const loadOptions = (val: SelectFetchOptionsType) => {\n      fetchRef.current += 1;\n      const fetchId = fetchRef.current;\n      setLoading(true);\n      fetchOptions(val).then((newOptions: OptionType[]) => {\n        if (fetchId !== fetchRef.current) {\n          return;\n        }\n\n        setLoading(false);\n        setOptions(newOptions);\n      });\n    };\n\n    return debounce(loadOptions, 800);\n  }, [fetchOptions]);\n\n  const handleOnChange = (val: string, option: OptionType | OptionType[]) => {\n    setValue(val);\n    if (onChange) onChange(val, option);\n  };\n\n  return (\n    <Select\n      labelInValue\n      filterOption={false}\n      onSearch={debounceFetcher}\n      onFocus={debounceFetcher}\n      {...props}\n      loading={loading}\n      value={value}\n      onChange={handleOnChange}\n      options={options}\n    />\n  );\n}\n","import React, { useState } from 'react';\nimport DefaultTable from 'antd/lib/table';\nimport ImportantIcon from './components/ImportantIcon';\nimport getRowClassName from './utils/getRowClassName';\nimport { TableProps, TableRecord, PrimaryTypes } from './index.d';\n\nexport function Table({\n  columns,\n  dataSource,\n  hidePagination = false,\n  loading = true,\n  onChange,\n  onRowClick,\n  pagination,\n  showImportantIcon = false,\n  ...rest\n}: TableProps) {\n  const [hover, setHover] =\n    useState<React.SetStateAction<string | undefined>>('');\n\n  const additionalColumns = [];\n  if (showImportantIcon) {\n    additionalColumns.push({\n      dataIndex: 'important',\n      key: 'important',\n      width: 40,\n      render: (_i: PrimaryTypes, res: TableRecord) => (\n        <ImportantIcon {...res} />\n      ),\n    });\n  }\n\n  const handleRowClick = (record: TableRecord) => () => {\n    if (onRowClick) onRowClick(record);\n  };\n\n  return (\n    <div className=\"isolib-table\">\n      <DefaultTable\n        size=\"small\"\n        scroll={{ y: '100%' }}\n        {...rest}\n        rowSelection={{ type: 'checkbox' }}\n        columns={[...additionalColumns, ...columns]}\n        dataSource={dataSource}\n        pagination={\n          !hidePagination && {\n            ...pagination,\n            showSizeChanger: true,\n            position: ['bottomCenter'],\n          }\n        }\n        onChange={onChange}\n        loading={loading}\n        rowKey={(record: { [key: string]: PrimaryTypes }) => record._id}\n        rowClassName={getRowClassName(hover)}\n        onRow={(record) => ({\n          onClick: handleRowClick(record),\n          onMouseEnter: () => setHover(record._id),\n          onMouseLeave: () => setHover(''),\n        })}\n      />\n    </div>\n  );\n}\n","/* eslint-disable react/forbid-prop-types */\nimport React, { useState, useRef, useEffect } from 'react';\nimport { Container, Button, Internal } from './components';\nimport { TextCollapseProps } from './interfaces';\n\nexport function TextCollapse({\n  children,\n  textSpace,\n  textLess,\n  textMore,\n  style = {},\n}: TextCollapseProps) {\n  const [collapsed, setCollapsed] = useState(true);\n  const [buttonHidden, setButtonHidden] = useState(true);\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const internalRef = useRef<HTMLDivElement>(null);\n  const textRef = useRef<HTMLSpanElement>(null);\n\n  const handleClick = () => {\n    setCollapsed(!collapsed);\n  };\n\n  useEffect(() => {\n    if (internalRef.current && textRef.current) {\n      const textWidth = textRef.current.offsetWidth;\n      const innerWidth = internalRef.current.offsetWidth;\n      setButtonHidden(textWidth + textSpace < innerWidth);\n    }\n  }, []);\n\n  return (\n    <Container style={style}>\n      <Internal collapsed={collapsed} innerRef={internalRef} space={textSpace}>\n        <span ref={textRef}>{children}</span>\n        <Button\n          innerRef={buttonRef}\n          collapsed={collapsed}\n          onClick={handleClick}\n          hidden={buttonHidden}\n        >\n          {collapsed ? textMore : textLess}\n        </Button>\n      </Internal>\n    </Container>\n  );\n}\n"],"names":["ImportantIcon","namespace","important","React","BellFilled","className","BellOutlined","Container","style","children","Button","DefaultButton","type","ref","innerRef","hidden","onClick","collapsed","position","Internal","space","paddingRight","classNames","breadcrumbNameMap","urlList","Object","keys","handleClick","url","event","preventDefault","DefaultBreadcrumb","margin","map","Item","key","href","fetchOptions","defaultOptions","defaultValue","onChange","props","useState","value","setValue","options","setOptions","loading","setLoading","fetchRef","useRef","debounceFetcher","useMemo","debounce","val","current","fetchId","then","newOptions","Select","labelInValue","filterOption","onSearch","onFocus","option","columns","dataSource","hidePagination","onRowClick","pagination","showImportantIcon","rest","hover","setHover","additionalColumns","push","dataIndex","width","render","_i","res","hoverID","handleRowClick","record","DefaultTable","size","scroll","y","rowSelection","showSizeChanger","rowKey","_id","rowClassName","classnames","read","join","onRow","onMouseEnter","onMouseLeave","textSpace","textLess","textMore","setCollapsed","buttonHidden","setButtonHidden","buttonRef","internalRef","textRef","useEffect","offsetWidth"],"mappings":"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"}