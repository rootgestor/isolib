{"version":3,"file":"isolib.cjs.production.min.js","sources":["../src/components/atoms/Icon/index.tsx","../src/components/molecules/Breadcrumb/index.tsx","../src/components/molecules/Table/components/ImportantIcon.tsx","../src/components/molecules/Table/utils/getRowClassName.tsx","../src/components/molecules/TextCollapse/components/Container.tsx","../src/components/molecules/TextCollapse/components/ButtonCollapse.tsx","../src/components/molecules/TextCollapse/components/Internal.tsx","../src/components/molecules/Button/index.tsx","../src/components/atoms/FlowNode/index.tsx","../src/components/atoms/FlowEdge/index.tsx","../src/hooks/useTrasnlate.ts","../src/components/molecules/Flow/components/NodeTypeModal.tsx","../src/components/molecules/Flow/helpers/exportNode.ts","../src/components/molecules/Flow/helpers/nodesRelocation.ts","../src/components/molecules/Flow/helpers/index.ts","../src/components/molecules/Flow/hooks/useFlow.ts","../src/components/molecules/Flow/index.tsx","../src/components/molecules/SelectAsync/index.tsx","../src/components/molecules/Table/index.tsx","../src/components/molecules/TextCollapse/index.tsx"],"sourcesContent":["import React from 'react';\nimport * as Icons from '@ant-design/icons';\nexport interface IconProps {\n  src: string;\n  width?: string | number;\n  height?: string | number;\n  style?: {};\n}\n\nfunction Icon({ src, ...args }: IconProps) {\n  const key = src as keyof typeof Icons;\n  const Icon: any = Icons[key];\n  if (Icon) {\n    return <Icon {...args} />;\n  }\n\n  return <img style={{ padding: '5px', ...args }} src={src} />;\n}\n\nexport default Icon;\n","import React from 'react';\nimport DefaultBreadcrumb from 'antd/lib/breadcrumb';\nimport type { BreadcrumbProps } from './typings';\n\nconst Breadcrumb = ({ breadcrumbNameMap, onClick }: BreadcrumbProps) => {\n  const handleClick =\n    (url?: string) =>\n    (event: React.MouseEvent): boolean => {\n      event.preventDefault();\n      if (url) onClick(url);\n      return false;\n    };\n\n  return (\n    <DefaultBreadcrumb style={{ margin: '16px 0' }}>\n      {breadcrumbNameMap.map(({ label, href }) => (\n        <DefaultBreadcrumb.Item key={href} href=\"#\" onClick={handleClick(href)}>\n          {label}\n        </DefaultBreadcrumb.Item>\n      ))}\n    </DefaultBreadcrumb>\n  );\n};\n\nexport default Breadcrumb;\n","import React from 'react';\nimport { BellOutlined, BellFilled } from '@ant-design/icons';\nimport { ImportantIconProps } from '../typings';\n\nfunction ImportantIcon({ important }: ImportantIconProps) {\n  const namespace = 'isolib-table-msg isolib-table-msg-icon';\n\n  if (important) {\n    return <BellFilled className={`${namespace}--selected`} />;\n  }\n  return <BellOutlined className={`${namespace}--no-selected`} />;\n}\n\nexport default ImportantIcon;\n","import { TableRecord } from '../typings';\n\nexport default (hoverID: any) =>\n  (record: TableRecord): string => {\n    const namespace = 'isolib-table-msg';\n    const classnames = [namespace];\n    if (record.read === false) {\n      classnames.push(`${namespace}--unread`);\n    }\n\n    if (hoverID === record._id) {\n      classnames.push(`${namespace}--hover`);\n    }\n\n    return classnames.join(' ');\n  };\n","import React from 'react';\nimport type { ContainerProps } from '../typings';\n\nexport const Container = ({ children, style = {} }: ContainerProps) => {\n  return (\n    <div\n      className=\"isolib-text-collapse isolib-text-collapse-container\"\n      style={style}\n    >\n      {children}\n    </div>\n  );\n};\n","import React from 'react';\nimport DefaultButton from 'antd/lib/button';\nimport type { ButtonCollapseProps } from '../typings';\n\nexport const ButtonCollapse = ({\n  children,\n  collapsed,\n  hidden,\n  innerRef,\n  space,\n  onClick,\n}: ButtonCollapseProps) => {\n  return (\n    <DefaultButton\n      type=\"link\"\n      className=\"isolib-text-collapse-button\"\n      ref={innerRef}\n      hidden={hidden}\n      onClick={onClick}\n      style={collapsed ? { position: 'absolute', right: `-${space}px` } : {}}\n    >\n      {children}\n    </DefaultButton>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport type { InternalProps } from '../typings';\n\nexport const Internal = ({\n  innerRef,\n  collapsed,\n  space,\n  children,\n}: InternalProps) => {\n  return (\n    <div\n      ref={innerRef}\n      style={collapsed && space ? { paddingRight: space } : {}}\n      className={classNames('isolib-text-collapse-internal', {\n        'isolib-text-collapse-internal--collapsed': collapsed,\n      })}\n    >\n      {children}\n    </div>\n  );\n};\n","import React from 'react';\nimport Icon from '../../atoms/Icon';\nimport DefaultButton from 'antd/lib/button';\nimport type { ButtonProps } from './typings';\n\nfunction Button(props: ButtonProps) {\n  const { icon, size, className, ...rest } = props;\n\n  if (size === 'bigger') {\n    return (\n      <Button className={`isolib__bigger-button ${className}`} {...rest}>\n        <div className=\"isolib__bigger-button-label\">{props.children}</div>\n        {!!icon && (\n          <div className=\"isolib__bigger-button-icon\">\n            <Icon src={icon} />\n          </div>\n        )}\n      </Button>\n    );\n  }\n\n  return <DefaultButton {...props} className={className} size={size} />;\n}\n\nexport default Button;\n","import React, { memo } from 'react';\nimport { Position, Handle } from 'reactflow';\nimport Icon from '../Icon';\n\nexport const FlowNode = memo(({ data }: any) => {\n  const { icon, label, onRemove, color = '#6938fb' } = data;\n  return (\n    <>\n      <Handle type=\"target\" position={Position.Top} />\n      <div className=\"react-flow__custom-node\">\n        <div\n          className=\"react-flow__custom-node-container\"\n          style={{ borderColor: color }}\n        >\n          <div\n            className=\"react-flow__custom-node-header\"\n            style={{ background: color }}\n          >\n            <span className=\"react-flow__custom-node-header-icon\">\n              <Icon src={icon} />\n            </span>\n            {!data?.static && (\n              <span\n                className=\"react-flow__custom-node-header-close\"\n                onClick={onRemove}\n              >\n                <Icon src=\"CloseCircleFilled\" />\n              </span>\n            )}\n          </div>\n          <div className=\"react-flow__custom-node-label\">{label}</div>\n        </div>\n      </div>\n      <Handle\n        type=\"source\"\n        position={Position.Bottom}\n        id=\"b\"\n        style={{ bottom: 10, top: 'auto' }}\n      />\n    </>\n  );\n});\n","import React from 'react';\nimport { getBezierPath } from 'reactflow';\n\nexport const FlowEdge = ({\n  id,\n  sourceX,\n  sourceY,\n  targetX,\n  targetY,\n  sourcePosition,\n  targetPosition,\n  style = {},\n  data,\n  markerEnd,\n}: any): JSX.Element => {\n  const mainColor = '#b1b1b7';\n  const [edgePath] = getBezierPath({\n    sourceX,\n    sourceY,\n    sourcePosition,\n    targetX,\n    targetY,\n    targetPosition,\n    curvature: 0,\n  });\n\n  const X = (sourceX + targetX) / 2;\n  const Y = (sourceY + targetY) / 2;\n  const node = data.target;\n  const edge = id;\n\n  return (\n    <>\n      <path\n        id={id}\n        style={style}\n        className=\"react-flow__edge-path\"\n        d={edgePath}\n        markerEnd={markerEnd}\n      />\n      {!data?.static && (\n        <>\n          <g\n            transform={`translate(${X}, ${Y})`}\n            onClick={() => data?.onAdd(node, edge)}\n          >\n            <rect\n              x=\"-10\"\n              y=\"-20\"\n              width=\"18\"\n              ry=\"4\"\n              rx=\"4\"\n              height=\"18\"\n              fill=\"white\"\n              stroke={mainColor}\n            ></rect>\n            <text fill={mainColor} y=\"-7\" x=\"-5\">\n              +\n            </text>\n          </g>\n          <g\n            transform={`translate(${X}, ${Y})`}\n            onClick={() => data?.onRemove(edge)}\n          >\n            <rect\n              x=\"-10\"\n              y=\"2\"\n              width=\"18\"\n              ry=\"4\"\n              rx=\"4\"\n              height=\"18\"\n              fill=\"white\"\n              stroke={mainColor}\n            ></rect>\n            <text fill={mainColor} y=\"15\" x=\"-4\">\n              -\n            </text>\n          </g>\n        </>\n      )}\n    </>\n  );\n};\n\n/**\n * \n  \n */\n","type I18nProps = { [key: string]: any };\n\nexport const useTranslate =\n  (i18n?: I18nProps) =>\n  (text: string): string => {\n    return i18n ? i18n[text] : text;\n  };\n","import React, { useState } from 'react';\nimport Modal from 'antd/lib/modal';\n\nimport Button from '../../../molecules/Button';\nimport { useTranslate } from '../../../../hooks/useTrasnlate';\n\nimport type { NoteTypeModalProps, payloadType } from '../typings';\n\nconst NodeTypeModal = ({\n  id,\n  icon,\n  label,\n  i18n,\n  form,\n  onSubmit,\n}: NoteTypeModalProps) => {\n  const tt = useTranslate(i18n);\n\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleCloseModal = () => setIsOpen(false);\n\n  const handleSubmit = (payload: payloadType) => {\n    onSubmit(payload);\n    handleCloseModal();\n  };\n\n  return (\n    <>\n      <Button\n        key={id}\n        icon={icon}\n        onClick={() => setIsOpen(true)}\n        size=\"bigger\"\n        className=\"flow-modal-add-item\"\n      >\n        {label}\n      </Button>\n\n      <Modal\n        title={tt('Add node')}\n        open={isOpen}\n        onCancel={handleCloseModal}\n        footer={[<Button onClick={handleCloseModal}>{tt('Close')}</Button>]}\n      >\n        {form({ onSubmit: handleSubmit })}\n      </Modal>\n    </>\n  );\n};\n\nexport default NodeTypeModal;\n","import type { Node, Edge } from 'reactflow';\nimport type { FlowDefaultNode } from '../typings';\n\nexport const exportNode = (nodes: Node[], edges: Edge[]): FlowDefaultNode[] => {\n  return nodes\n    .filter((node) => node.type === 'FlowNode')\n    .map(({ data, id }) => {\n      const source = edges.find((edge) => edge.source === id)?.id;\n      const target = edges.find((edge) => edge.target === id)?.id;\n\n      const variables: FlowDefaultNode = {\n        label: data.label,\n        icon: data.icon,\n      };\n\n      if (!source || !target) variables.unrelated = true;\n\n      if (data.color) variables.color = data.color;\n\n      if (data.static) variables.static = data.static;\n\n      if (data.payload) variables.payload = data.payload;\n\n      return variables;\n    });\n};\n","import type { FlowNode } from '../typings';\nimport {\n  dxBetweenStartAndNode,\n  dxBetweenNodes,\n  dxLessWhenStaticNode,\n} from './index';\n\nexport const nodesRelocation = (nodes: FlowNode[]) => {\n  return nodes.reduce((initial, node, key) => {\n    const isStart = key === 0;\n    const isSecond = key === 1;\n    const beforeItem = initial[key - 1];\n    if (isStart) {\n      node.position.y = 0;\n    } else if (isSecond) {\n      node.position.y = dxBetweenStartAndNode;\n    } else {\n      const positionY = beforeItem?.position.y;\n      node.position.y = positionY + dxBetweenNodes;\n    }\n\n    if (beforeItem?.id !== 'start' && node.data.static) {\n      node.position.y -= dxLessWhenStaticNode;\n    }\n\n    return [...initial, node];\n  }, [] as FlowNode[]);\n};\n","export * from './exportNode';\nexport * from './nodesRelocation';\n\nexport const mainColor = '#6938fb';\nexport const dxBetweenNodes = 100;\nexport const dxBetweenStartAndNode = 80;\nexport const dxLessWhenStaticNode = 20;\n","import React, { useEffect, useRef, useCallback } from 'react';\nimport { useNodesState, useEdgesState, addEdge } from 'reactflow';\nimport { exportNode, nodesRelocation } from '../helpers';\n\nimport { mainColor, dxBetweenStartAndNode } from '../helpers';\n\nimport type {\n  FlowNode,\n  FlowDefaultNode,\n  FlowEdge,\n  payloadType,\n} from '../typings';\n\nconst circleStyles: React.CSSProperties = {\n  width: 24,\n  height: 24,\n  borderRadius: '50%',\n  textTransform: 'uppercase',\n  textAlign: 'center',\n  padding: 0,\n  justifyContent: 'center',\n  alignItems: 'center',\n  display: 'flex',\n  fontSize: '.3rem',\n};\n\nconst initialNodes: FlowNode[] = [\n  {\n    id: 'start',\n    type: 'input',\n    data: { label: 'Start' },\n    style: {\n      ...circleStyles,\n      background: mainColor,\n      borderColor: mainColor,\n      color: '#fff',\n    },\n    position: { x: 63, y: 0 },\n    draggable: true,\n  },\n  {\n    id: 'end',\n    type: 'output',\n    style: {\n      ...circleStyles,\n      background: mainColor,\n      borderColor: mainColor,\n      color: '#fff',\n    },\n    data: { label: 'End' },\n    position: { x: 63, y: dxBetweenStartAndNode },\n    draggable: true,\n  },\n];\n\nconst initialEdges: FlowEdge[] = [\n  {\n    id: 'start-end',\n    type: 'FlowEdge',\n    source: 'start',\n    target: 'end',\n  },\n];\n\ninterface BuildFlowData {\n  source: string;\n  target: string;\n  static?: boolean;\n}\n\ninterface FlowHookProps {\n  openModal: (isOpen: boolean) => void;\n  onChange?: (nodes: FlowDefaultNode[]) => void;\n  defaultNodes?: FlowDefaultNode[];\n  draggable?: boolean;\n}\n\nconst useFlow = ({\n  defaultNodes = [],\n  onChange,\n  openModal,\n  draggable,\n}: FlowHookProps) => {\n  const EdgeDataRef = useRef({ idNode: '', idEdge: '' });\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n\n  const onAddEdge = (idNode: string, idEdge: string) => {\n    EdgeDataRef.current = { idNode, idEdge };\n    openModal(true);\n  };\n\n  const onRemoveEdge = (idEdge: string) => {\n    let nodeList: FlowNode[] = [];\n    let edgeList: FlowEdge[] = [];\n\n    setNodes((nodes) => {\n      nodeList = [...nodes];\n      return nodes;\n    });\n\n    setEdges((edges: FlowEdge[]) => {\n      edgeList = edges.filter((edge) => edge.id !== idEdge);\n      return edgeList;\n    });\n\n    if (onChange) {\n      onChange(exportNode(nodeList, edgeList));\n    }\n  };\n\n  const onConnect = useCallback((params) => {\n    let nodeList: FlowNode[] = [];\n    let edgeList: FlowEdge[] = [];\n\n    setNodes((nodes) => {\n      nodeList = [...nodes];\n      return nodes;\n    });\n\n    setEdges((eds: FlowEdge[]) => {\n      const targets = eds.filter(\n        (ed) => ed.target === params.target || ed.source === params.target\n      );\n\n      const sources = eds.filter(\n        (ed) => ed.target === params.source || ed.source === params.source\n      );\n\n      if (targets.length > 1 || sources.length > 1) return eds;\n\n      edgeList = addEdge(buildFlowEdge(params), eds);\n      return edgeList;\n    });\n\n    if (onChange) {\n      onChange(exportNode(nodeList, edgeList));\n    }\n  }, []);\n\n  const buildFlowEdge = (data: BuildFlowData): FlowEdge => {\n    const curDate = String(Math.random() * 100000);\n    const { source, target } = data;\n    return {\n      id: curDate,\n      type: 'FlowEdge',\n      source,\n      target,\n      data: {\n        target,\n        static: data.static,\n        onAdd: onAddEdge,\n        onRemove: onRemoveEdge,\n      },\n    };\n  };\n\n  const handleRemove = (id: string) => {\n    let nodeList: FlowNode[] = [];\n    let edgeList: FlowEdge[] = [];\n\n    setNodes((nodes) => {\n      setEdges((edges: FlowEdge[]) => {\n        const index = nodes.findIndex((node) => node.id === id);\n\n        const afterElement = nodes[index + 1];\n        const source = nodes[index - 1].id;\n        const target = afterElement.id;\n\n        const added = buildFlowEdge({\n          static: afterElement.data.static,\n          source,\n          target,\n        });\n\n        const filtered = edges.filter(\n          (edge) => edge.source !== id && edge.target !== id\n        );\n\n        edgeList = [...filtered, added];\n        return edgeList;\n      });\n\n      nodeList = nodes.filter((node) => node.id !== id);\n      return nodesRelocation(nodeList);\n    });\n\n    if (onChange) {\n      onChange(exportNode(nodeList, edgeList));\n    }\n  };\n\n  const buildFlowNode = (\n    data: FlowDefaultNode,\n    payload: payloadType\n  ): FlowNode => {\n    const curDate = String(Math.random() * 100000);\n    return {\n      id: curDate,\n      type: 'FlowNode',\n      position: { x: 0, y: 0 },\n      draggable,\n      data: {\n        ...data,\n        payload,\n        onRemove: () => handleRemove(curDate),\n      },\n    };\n  };\n\n  const handleAdd =\n    (defaultNode: FlowDefaultNode) => (payload: payloadType) => {\n      let nodesCopy: FlowNode[] = [];\n      let edgeCopy: FlowEdge[] = [];\n\n      const { idNode, idEdge } = EdgeDataRef.current;\n      const node = buildFlowNode(defaultNode, payload);\n\n      setNodes((nodes) => {\n        setEdges((edges: FlowEdge[]) => {\n          const deleted = edges.find((edge) => edge.id === idEdge);\n          if (!deleted) return edges;\n\n          const addedEdges = [\n            buildFlowEdge({\n              source: deleted.source,\n              target: node.id,\n            }),\n            buildFlowEdge({\n              source: node.id,\n              target: deleted.target,\n            }),\n          ];\n\n          edgeCopy = edges\n            .filter((edge) => edge.id !== idEdge)\n            .concat(addedEdges);\n          return edgeCopy;\n        });\n\n        nodesCopy = [...nodes];\n        const index = nodesCopy.findIndex((node) => node.id === idNode);\n        nodesCopy.splice(index, 0, node);\n        return nodesRelocation(nodesCopy);\n      });\n\n      if (onChange) {\n        onChange(exportNode(nodesCopy, edgeCopy));\n      }\n\n      openModal(false);\n    };\n\n  useEffect(() => {\n    const res = defaultNodes.reduce(\n      (initial, data: FlowDefaultNode, key: number) => {\n        const beforeItem = initial.nodes[key - 1];\n\n        const node = buildFlowNode(data, data.payload || {});\n        const edge = buildFlowEdge({\n          static: data.static,\n          source: beforeItem ? beforeItem.id : 'start',\n          target: node.id,\n        });\n\n        return {\n          ...initial,\n          nodes: [...initial.nodes, node],\n          edges: [...initial.edges, edge],\n        };\n      },\n      { nodes: [] as FlowNode[], edges: [] as FlowEdge[] }\n    );\n\n    const [start, end] = initialNodes.map((item) => ({ ...item, draggable }));\n    const nodes = nodesRelocation([start, ...res.nodes, end]);\n    const sourceIndex = nodes.length - 2;\n\n    const endEdge = buildFlowEdge({\n      source: nodes[sourceIndex].id,\n      target: 'end',\n    });\n\n    setNodes(nodes);\n    setEdges([...res.edges, endEdge]);\n  }, []);\n\n  return {\n    nodes,\n    edges,\n    onNodesChange,\n    onEdgesChange,\n    handleAdd,\n    onConnect,\n  };\n};\n\nexport default useFlow;\n","import React, { useRef, useState, useEffect } from 'react';\nimport ReactFlow, { Controls } from 'reactflow';\nimport Modal from 'antd/lib/modal';\n\nimport Button from '../../molecules/Button';\nimport * as FlowNode from '../../atoms/FlowNode';\nimport * as FlowEdge from '../../atoms/FlowEdge';\nimport { useTranslate } from '../../../hooks/useTrasnlate';\nimport NodeTypeModal from './components/NodeTypeModal';\nimport useFlow from './hooks/useFlow';\n\nimport type { FlowProps, FlowContainerRef } from './typings';\n\n// import './styles.less';\n\nconst Flow = (props: FlowProps) => {\n  const containerRef: FlowContainerRef = useRef(null);\n  const tt = useTranslate(props.i18n);\n  const [horizontal, setHorizontal] = useState(0);\n  const [isOpen, openModal] = useState(false);\n\n  const { defaultNodes, draggable, onChange } = props;\n  const flowParams = { defaultNodes, onChange, openModal, draggable };\n\n  const flow = useFlow(flowParams);\n\n  const handleCloseModal = () => openModal(false);\n\n  useEffect(() => {\n    const width = containerRef.current?.offsetWidth;\n    if (width) {\n      const x = width / 2 - 150;\n      setHorizontal(x);\n    }\n  }, []);\n\n  return (\n    <div\n      ref={containerRef}\n      className=\"react-flow-global-container\"\n      style={{ width: '100%', height: '100vh' }}\n    >\n      {horizontal && (\n        <>\n          <ReactFlow\n            {...flow}\n            edgeTypes={FlowEdge}\n            nodeTypes={FlowNode}\n            snapToGrid={true}\n            defaultViewport={{\n              x: horizontal,\n              y: 0,\n              zoom: 2,\n            }}\n            minZoom={1}\n            maxZoom={2}\n            attributionPosition=\"bottom-left\"\n          >\n            <Controls showInteractive={false} />\n          </ReactFlow>\n          {props.nodeTypes && (\n            <Modal\n              title={tt('Add node')}\n              open={isOpen}\n              onCancel={handleCloseModal}\n              footer={[\n                <Button onClick={handleCloseModal}>{tt('Close')}</Button>,\n              ]}\n            >\n              <div className=\"flow-modal-add-container\">\n                {props.nodeTypes.map((node) => (\n                  <NodeTypeModal\n                    key={node.id}\n                    {...node}\n                    onSubmit={flow.handleAdd(node)}\n                    i18n={props.i18n}\n                  />\n                ))}\n              </div>\n            </Modal>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Flow;\n","import React, { useState, useRef, useMemo } from 'react';\nimport Select from 'antd/lib/select';\nimport debounce from 'lodash/debounce';\n\nimport {\n  SelectAsyncProps,\n  OptionType,\n  SelectFetchOptionsType,\n} from './typings';\n\nfunction SelectAsync({\n  fetchOptions,\n  defaultOptions,\n  defaultValue,\n  onChange,\n  ...props\n}: SelectAsyncProps) {\n  const [value, setValue] = useState(() => defaultValue);\n  const [options, setOptions] = useState(() => defaultOptions);\n  const [loading, setLoading] = useState(false);\n  const fetchRef = useRef(0);\n\n  const debounceFetcher = useMemo(() => {\n    const loadOptions = (val: SelectFetchOptionsType) => {\n      fetchRef.current += 1;\n      const fetchId = fetchRef.current;\n      setLoading(true);\n      fetchOptions(val).then((newOptions: OptionType[]) => {\n        if (fetchId !== fetchRef.current) {\n          return;\n        }\n\n        setLoading(false);\n        setOptions(newOptions);\n      });\n    };\n\n    return debounce(loadOptions, 800);\n  }, [fetchOptions]);\n\n  const handleOnChange = (val: string, option: OptionType | OptionType[]) => {\n    setValue(val);\n    if (onChange) onChange(val, option);\n  };\n\n  return (\n    <Select\n      labelInValue\n      filterOption={false}\n      onSearch={debounceFetcher}\n      onFocus={debounceFetcher}\n      {...props}\n      loading={loading}\n      value={value}\n      onChange={handleOnChange}\n      options={options}\n    />\n  );\n}\n\nexport default SelectAsync;\n","import React, { useState } from 'react';\nimport DefaultTable from 'antd/lib/table';\nimport ImportantIcon from './components/ImportantIcon';\nimport getRowClassName from './utils/getRowClassName';\nimport { TableProps, TableRecord } from '../../..';\n\nfunction Table({\n  columns,\n  dataSource,\n  hidePagination = false,\n  loading = true,\n  onChange,\n  onRowClick,\n  pagination,\n  isMessage = false,\n  ...rest\n}: TableProps) {\n  const [hover, setHover] =\n    useState<React.SetStateAction<string | undefined>>('');\n\n  const additionalColumns = [];\n  if (isMessage) {\n    additionalColumns.push({\n      dataIndex: 'important',\n      key: 'important',\n      width: 40,\n      render: (_i: string | number | boolean, res: TableRecord) => (\n        <ImportantIcon {...res} />\n      ),\n    });\n  }\n\n  const handleRowClick = (record: TableRecord) => () => {\n    if (onRowClick) onRowClick(record);\n  };\n\n  return (\n    <div className={`isolib-table ${isMessage ? 'isolib-table-msg' : ''}`}>\n      <DefaultTable\n        size=\"middle\"\n        scroll={{ y: '100%' }}\n        {...rest}\n        rowSelection={{ type: 'checkbox' }}\n        columns={[...additionalColumns, ...columns]}\n        dataSource={dataSource}\n        pagination={\n          !hidePagination && {\n            ...pagination,\n            showSizeChanger: true,\n            position: ['bottomCenter'],\n          }\n        }\n        onChange={onChange}\n        loading={loading}\n        rowKey={(record: { [key: string]: any }) => record._id}\n        rowClassName={isMessage ? getRowClassName(hover) : ''}\n        onRow={(record) => ({\n          onClick: handleRowClick(record),\n          onMouseEnter: () => setHover(record._id),\n          onMouseLeave: () => setHover(''),\n        })}\n      />\n    </div>\n  );\n}\n\nexport default Table;\n","import React, { useState, useRef, useEffect } from 'react';\nimport { Container, ButtonCollapse, Internal } from './components';\nimport type { TextCollapseProps } from './typings';\n\nfunction TextCollapse({\n  children,\n  textSpace,\n  textLess,\n  textMore,\n  style = {},\n}: TextCollapseProps) {\n  const [collapsed, setCollapsed] = useState(true);\n  const [buttonHidden, setButtonHidden] = useState(true);\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const internalRef = useRef<HTMLDivElement>(null);\n  const textRef = useRef<HTMLSpanElement>(null);\n\n  const handleClick = () => {\n    setCollapsed(!collapsed);\n  };\n\n  useEffect(() => {\n    if (internalRef.current && textRef.current) {\n      const textWidth = textRef.current.offsetWidth;\n      const innerWidth = internalRef.current.offsetWidth;\n      const bHidden = !!(textWidth + textSpace < innerWidth);\n      setButtonHidden(bHidden);\n    }\n  }, [textSpace]);\n\n  return (\n    <Container style={style}>\n      <Internal collapsed={collapsed} innerRef={internalRef} space={textSpace}>\n        <span ref={textRef}>{children}</span>\n        <ButtonCollapse\n          innerRef={buttonRef}\n          collapsed={collapsed}\n          onClick={handleClick}\n          hidden={buttonHidden}\n          space={textSpace}\n        >\n          {collapsed ? textMore : textLess}\n        </ButtonCollapse>\n      </Internal>\n    </Container>\n  );\n}\n\nexport default TextCollapse;\n"],"names":["Icon","src","args","Icons","React","style","padding","ImportantIcon","namespace","important","BellFilled","className","BellOutlined","Container","children","ButtonCollapse","DefaultButton","type","ref","innerRef","hidden","onClick","collapsed","position","right","space","Internal","paddingRight","classNames","Button","props","icon","size","rest","memo","data","label","onRemove","color","Handle","Position","Top","borderColor","background","Bottom","id","bottom","top","sourceX","sourceY","targetX","targetY","markerEnd","getBezierPath","sourcePosition","targetPosition","curvature","X","Y","node","target","edge","d","transform","onAdd","x","y","width","ry","rx","height","fill","stroke","useTranslate","i18n","text","NodeTypeModal","form","onSubmit","tt","useState","isOpen","setIsOpen","handleCloseModal","key","Modal","title","open","onCancel","footer","payload","exportNode","nodes","edges","filter","map","source","find","_edges$find","_edges$find2","variables","unrelated","nodesRelocation","reduce","initial","beforeItem","dxBetweenStartAndNode","dxBetweenNodes","dxLessWhenStaticNode","circleStyles","borderRadius","textTransform","textAlign","justifyContent","alignItems","display","fontSize","initialNodes","draggable","initialEdges","DefaultBreadcrumb","margin","breadcrumbNameMap","url","href","Item","event","preventDefault","containerRef","useRef","horizontal","setHorizontal","openModal","flow","defaultNodes","onChange","EdgeDataRef","idNode","idEdge","useNodesState","setNodes","onNodesChange","useEdgesState","setEdges","onEdgesChange","onAddEdge","current","onRemoveEdge","nodeList","edgeList","onConnect","useCallback","params","eds","targets","ed","sources","length","addEdge","buildFlowEdge","curDate","String","Math","random","buildFlowNode","index","findIndex","afterElement","added","filtered","useEffect","res","item","endEdge","handleAdd","defaultNode","nodesCopy","edgeCopy","deleted","addedEdges","concat","splice","useFlow","_containerRef$current","offsetWidth","ReactFlow","edgeTypes","FlowEdge","nodeTypes","FlowNode","snapToGrid","defaultViewport","zoom","minZoom","maxZoom","attributionPosition","Controls","showInteractive","fetchOptions","defaultOptions","defaultValue","value","setValue","options","setOptions","loading","setLoading","fetchRef","debounceFetcher","useMemo","debounce","val","fetchId","then","newOptions","Select","labelInValue","filterOption","onSearch","onFocus","option","columns","dataSource","hidePagination","onRowClick","pagination","isMessage","hover","setHover","additionalColumns","push","dataIndex","render","_i","hoverID","handleRowClick","record","DefaultTable","scroll","rowSelection","showSizeChanger","rowKey","_id","rowClassName","classnames","read","join","onRow","onMouseEnter","onMouseLeave","textSpace","textLess","textMore","setCollapsed","buttonHidden","setButtonHidden","buttonRef","internalRef","textRef"],"mappings":"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"}